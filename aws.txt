ls
cd ..
cd ../../usr
pwd

mkdir good
touch g.txt
touch good.txt

sudo timedatectl set-timezone Asia/Seoul


11-14/627

mv = 디렉토리 이동 = 잘라서 이동하기
mv good.txt ./good
touch good1.txt
touch good.txt
mv -i good.txt ./good (오버라이딩됨)

(절대 치면 안되는 명령어) // rm -rf ./*
**※ 들이면 좋은 습관에는 잘 모르겠다면 `man` 메뉴얼 찾아보는 습관**
**※ 들이면 좋은 습관에는 `-i`를 습관적으로 할 것.(mv, rm 등)**
^C=ctrl+c == 취소

cp = 디렉토리 이동 = 복사해서 붙여넣기

mkdir = 디렉토리 생성

ls -a -l 모든 파일 리스트로 보기

rmdir = 빈 디렉토리 삭제 = 비어있어야 한다.

rm = 파일이나 디렉터리를 삭제

cat(concatenate) = 파일 내용을 출력, 연결, 생성할떼 사용.

 - cat filename.txt = 내용을 출력
 - cat file1.txt file2.txt > mergedfile.txt = 두 내용을 결합 mergedfile.txt에 저장
 - cat > good1.txt = good1.txt를 만들고 입력을 한 다음 ctrl + d를 눌러 파일내용을 입력해라.
 - cat file1.txt > file2.txt = 1의 내용을 2에 복사한다. 2가 존재하면 덮어쓴다.


grep = 텍스트의 패턴을 검색하는데 사용하는 명령어.

 - grep "test" test.txt

cat > test.txt
"Hello, this is a test file. It contains serveral wers, including the word test."

 -i 대소문자 무시하고 검색
 -v 패턴과 불일치하는 줄을 출력
 등이 있다.

ps = ?

ps -ef
ps aux
 ex) ps aux | grep "django"

sort = 정렬명령어. 예시를 참고하자....


find = 파일을 찾는 명령어
find 경로 표현식
ex) find /. test.txt

- name 지정된 이름의 파일을 찾는다.

 - iname name과 유사하지만 대소문자를 구분안하고 찾는다.
ex) find . -iname g.txt

 - type[d/f] 디렉토리, 일반파일을 찾는다.

 - mtime 지정된 일수만큼 이전에 수정된 파일을 찾는다.
 ex) find /var/log -type f -mtime -7 (일반파일에 7일 이전에 수정된 파일들)

 - exec(실행) 검색결과에 대해 지정된 명령을 실행한다. {} = 검색결과를 의미
 ex) find . -name good.txt -exec mv {} new \; == good.txt를 찾아서 new로 바꿔라

touch 파일을 생성하거나 타임스템프를 변경하는데 사용된다.

 - touch example.txt

 - touch -t 202306231200 example.txt

whoami = 접속자의 이름이 왓더 ㅋㅋㅋㅋ


which 실행 가능한 파일의 경로를 찾아줌.

whereis 파일의 위치를 찾을때 사용.
 ex) whereis ls


와일드카드.

 ex)rm *.txt = txt파일을 모두 지워라
 find /home/ubuntu/ -name "new*"

-------------------------------------------------------------------


 사용자 그룹 타인
    7      7     7
d rwx    rwx  rwx
r 읽기
w쓰기
x 실행


chmod = 권한 설정 명령어


----------------------------------------------------------------------
sudo passwd root

su root

sudo apt upgrade
sudo apt update

sudo apt install nginx
sudo nginx -t

sudo systemctl status nginx(확인용 명령어. 초록불이 들어와야 한다.)(


11-14 15시

sudo vim /etc/ssh/sshd_config
PasswordAuthentication yes(변경)

sudo systemctl restart sshd
sudo systemctl status sshd

(cmd로 입력)
ssh 유저이름@ip(43.201.110.207)
그럼 연결됨.
or
ssh 키 다운
cmd에 ssh -i (ssh파일 본인 위치\이름)@ip
이러면 됨.



11-15 


----------------------------------------------------------------

설정 - 새 프로필


su / root로 로그인
sudo visudo 추가한 계정에 ALL

sudo apt update
sudo apt upgrade

sudo apt install zsh
chsh -s $(which zsh)

sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

source .zshrc



--
git switch master
git status
git -h
git branch
git branch -c main
git branch
git switch main

--

git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions

vim .zshrc 에서 plugins 안에 zsh-autosuggestions 추가
source .zshrc

git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
cd .oh-my-zsh/plugins에 저장된다.

vim .zshrc 에서 plugins 안에 zsh-syntax-highlighting 추가
source .zshrc

sudo apt-get install autojump
vim .zshrc 에서 plugins 안에 autojump 추가
source .zshrc

--

set.txt파일이 있는 곳으로 가서 scp set.txt bardnia@43.201.110.207:~/app입력 == bardnia/app 안에 파일이 들어간다.

scp {filename} chicken@{ip주소}:~/app
---
우분투 파이어 월
sudo ufw statusdf
결과 inactive == 정상
---

원격연결하고 가상환경부터 시작해서 작업하면 된다.

sudo vim /etc/nginx/sites-enabled/default == nginx 기본 설정 파일


